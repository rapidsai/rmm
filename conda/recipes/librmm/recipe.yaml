# Copyright (c) 2018-2025, NVIDIA CORPORATION.
schema_version: 1


# bashlet to use for this:
# IFS=- read -r RAW_VERSION GIT_DESCRIBE_NUMBER GIT_DESCRIBE_HASH <<< $(git describe --tags)
# Takes string like "v25.02.00a-49-g77dadb88" and splits on the `-` and drops the result into three variables

context:
  version: ${{ env.get("RAPIDS_PACKAGE_VERSION") }}
  cuda_version: ${{ (env.get('RAPIDS_CUDA_VERSION') | split('.'))[:2] | join(".") }}
  cuda_major: ${{ (env.get('RAPIDS_CUDA_VERSION') | split('.'))[0] }}
  date_string: ${{ env.get("RAPIDS_DATE_STRING") }}
  GIT_DESCRIBE_HASH: ${{ env.get("GIT_DESCRIBE_HASH") }}
  GIT_DESCRIBE_NUMBER: ${{ env.get("GIT_DESCRIBE_NUMBER") }}

recipe:
  name: librmm-split

cache:
  source:
    path: ../../..

  requirements:
    build:
      - cmake ${{ cmake_version }}
      - ninja
      - ${{ compiler('c') }}
      - ${{ compiler('cxx') }}
      - ${{ compiler('cuda') }} =${{ cuda_version }}
      - cuda-version =${{ cuda_version }}
      - ${{ stdlib("c") }}

  build:
    script:
      file: build.sh
      secrets:
        - AWS_ACCESS_KEY_ID
        - AWS_SECRET_ACCESS_KEY
        - AWS_SESSION_TOKEN

      env:
        CMAKE_C_COMPILER_LAUNCHER: ${{ env.get("CMAKE_C_COMPILER_LAUNCHER", default="sccache") }}
        CMAKE_CUDA_COMPILER_LAUNCHER: ${{ env.get("CMAKE_CUDA_COMPILER_LAUNCHER", default="sccache") }}
        CMAKE_CXX_COMPILER_LAUNCHER: ${{ env.get("CMAKE_CXX_COMPILER_LAUNCHER", default="sccache") }}
        CMAKE_GENERATOR: ${{ env.get("CMAKE_GENERATOR", default="Ninja") }}
        PARALLEL_LEVEL: ${{ env.get("PARALLEL_LEVEL", default="4") }}
        SCCACHE_BUCKET: ${{ env.get("SCCACHE_BUCKET", default="") }}
        SCCACHE_IDLE_TIMEOUT: ${{ env.get("SCCACHE_IDLE_TIMEOUT", default="") }}
        SCCACHE_REGION: ${{ env.get("SCCACHE_REGION", default="") }}
        SCCACHE_S3_USE_SSL: ${{ env.get("SCCACHE_S3_USE_SSL", default="") }}
        SCCACHE_S3_NO_CREDENTIALS: ${{ env.get("SCCACHE_S3_NO_CREDENTIALS", default="") }}
        SCCACHE_S3_KEY_PREFIX: librmm-${{ env.get("RUNNER_ARCH", default="X64") | replace("X64", "linux64") | replace("ARM64", "aarch64") | lower }}

outputs:
  - package:
      name: librmm
      version: ${{ version }}
    build:
      number: ${{ GIT_DESCRIBE_NUMBER }}
      string: cuda${{ cuda_major }}_${{ date_string }}_${{ GIT_DESCRIBE_HASH }}_${{ GIT_DESCRIBE_NUMBER }}
      script: install_librmm.sh
    requirements:
      host:
        - cmake ${{ cmake_version }}
        - cuda-version =${{ cuda_version }}
        - fmt ${{ fmt_version }}
        - spdlog ${{ spdlog_version }}
      run:
        - ${{ pin_compatible('cuda-version', upper_bound='x', lower_bound='x') }}
        - if: cuda_major == "11"
          then: cudatoolkit
        - fmt ${{ fmt_version }}
        - spdlog ${{ spdlog_version }}
      run_exports:
        - ${{ pin_subpackage("librmm", upper_bound="x.x") }}
      ignore_run_exports:
        from_package:
          - ${{ compiler('cuda') }}
    tests:
      - script:
          - "test -d \"${PREFIX}/include/rmm\""
    about:
      license: Apache-2.0
      summary: librmm library
      homepage: https://rapids.ai/
  - package:
      name: librmm-tests
      version: ${{ version }}
    build:
      number: ${{ GIT_DESCRIBE_NUMBER }}
      string: cuda${{ cuda_major }}_${{ date_string }}_${{ GIT_DESCRIBE_HASH }}_${{ GIT_DESCRIBE_NUMBER }}
      script: install_librmm_tests.sh
    requirements:
      host:
        - cmake ${{ cmake_version }}
        - cuda-version =${{ cuda_version }}
        - if: cuda_major == "11"
          then: cudatoolkit
          else: cuda-cudart-dev
        - fmt ${{ fmt_version }}
        - spdlog ${{ spdlog_version }}
      run:
        - if: cuda_major == "11"
          then: cudatoolkit
          else: cuda-cudart
        - ${{ pin_compatible('cuda-version', upper_bound='x', lower_bound='x') }}
        - ${{ pin_subpackage('librmm', exact=True) }}
      ignore_run_exports:
        from_package:
          - ${{ compiler('cuda') }}
          - if: cuda_major == "11"
            then: cuda-cudart-dev
            else: cuda-version
    about:
      license: Apache-2.0
      summary: librmm test & benchmark executables
      homepage: https://rapids.ai/
