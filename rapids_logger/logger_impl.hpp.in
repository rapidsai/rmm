/*
 * Copyright (c) 2024, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#include "../logger.hpp"

#include <spdlog/sinks/basic_file_sink.h>
#include <spdlog/sinks/ostream_sink.h>
#include <spdlog/spdlog.h>

#include <memory>
#include <sstream>
#include <string>


namespace __attribute__((visibility("hidden"))) @_RAPIDS_LOGGER_NAMESPACE@ {

namespace detail {

level_enum string_to_level(std::string_view const env_lvl_str)
{
    if (env_lvl_str == "TRACE") return level_enum::trace;
    if (env_lvl_str == "DEBUG") return level_enum::debug;
    if (env_lvl_str == "INFO") return level_enum::info;
    if (env_lvl_str == "WARN") return level_enum::warn;
    if (env_lvl_str == "ERROR") return level_enum::error;
    if (env_lvl_str == "CRITICAL") return level_enum::critical;
    if (env_lvl_str == "OFF") return level_enum::off;
    std::ostringstream os{};
    os << "Invalid logging level: " << env_lvl_str;
    throw std::invalid_argument(os.str());
}

spdlog::level::level_enum to_spdlog_level(level_enum lvl)
{
  return static_cast<spdlog::level::level_enum>(static_cast<int32_t>(lvl));
}

level_enum from_spdlog_level(spdlog::level::level_enum lvl)
{
  return static_cast<level_enum>(static_cast<int32_t>(lvl));
}

}  // namespace detail


// Sink methods
sink::sink(spdlog::sink_ptr sink) : impl{sink} {}

// Logger methods
// TODO: This constructor and the one below introduce some undesirable
// vtable/typeinfo public symbols for basic_file_sink and ostream_sink. I'm not
// sure how to avoid this since they come from std::shared_ptr having inline
// methods that require injection into the global symbol table for
// disambiguation across TUs. I'm also not sure that we entirely need to
// support this kind of constructor, so we might just want to remove it. At
// minimum we will always have to expose the
// std::shared_ptr<spdlog::sinks::sink> add_sink/remove_sink functions, but
// those don't introduce any vtable or tbypeinfo entries (presumably because
// the class doesn't actually implement any virtual functions).
logger::logger(std::string name, std::string filename)
  : impl{std::make_unique<spdlog::logger>(
        name,
        std::make_shared<spdlog::sinks::basic_file_sink_mt>(filename, true  // truncate file
                                                            ))}
{
  init_logger();
}

logger::logger(std::string name, std::ostream& stream)
  : impl{std::make_unique<spdlog::logger>(
        name,
        std::make_shared<spdlog::sinks::ostream_sink_mt>(stream))}
{
    init_logger();
}

logger::logger(std::string name, std::vector<std::shared_ptr<sink>> sinks)
{
  std::vector<spdlog::sink_ptr> spdlog_sinks;
  spdlog_sinks.reserve(sinks.size());
  for (auto const& s : sinks) {
    spdlog_sinks.emplace_back(s->impl);
  }
  impl = std::make_unique<spdlog::logger>(name, spdlog_sinks.begin(), spdlog_sinks.end());
  init_logger();
}

void logger::init_logger() {
    impl->set_pattern("[%6t][%H:%M:%S:%f][%-6l] %v");
    auto const env_logging_level = std::getenv("@_RAPIDS_LOGGER_MACRO_PREFIX@_DEFAULT_LOGGING_LEVEL");
    if (env_logging_level != nullptr) {
      set_level(detail::string_to_level(env_logging_level));
    }
    auto const env_flush_level = std::getenv("@_RAPIDS_LOGGER_MACRO_PREFIX@_DEFAULT_FLUSH_LEVEL");
    if (env_flush_level != nullptr) {
      flush_on(detail::string_to_level(env_flush_level));
    }
  }

logger::~logger() = default;
logger::logger(logger&&) = default;
logger& logger::operator=(logger&&) = default;

void logger::log(level_enum lvl, std::string const& message) { impl->log(detail::to_spdlog_level(lvl), message); }

void logger::set_level(level_enum log_level) { impl->set_level(detail::to_spdlog_level(log_level)); }
void logger::flush() { impl->flush(); }
void logger::flush_on(level_enum log_level) { impl->flush_on(detail::to_spdlog_level(log_level)); }
level_enum logger::flush_level() const { return detail::from_spdlog_level(impl->flush_level()); }
bool logger::should_log(level_enum lvl) const { return impl->should_log(detail::to_spdlog_level(lvl)); }
void logger::add_sink(spdlog::sink_ptr sink) { impl->sinks().push_back(sink); }
void logger::remove_sink(spdlog::sink_ptr sink) {
  auto& sinks = impl->sinks();
  sinks.erase(std::remove(sinks.begin(), sinks.end(), sink), sinks.end());
}
level_enum logger::level() const { return detail::from_spdlog_level(impl->level()); }
void logger::set_pattern(std::string pattern) { impl->set_pattern(pattern); }

}  // namespace @_RAPIDS_LOGGER_NAMESPACE@
